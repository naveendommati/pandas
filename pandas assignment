Q1. How do you load a CSV file into a Pandas DataFrame?
answer:--
import pandas as pd
df = pd.read_csv('data.csv')
print(df.to_string())

Q2. How do you check the data type of a column in a Pandas DataFrame?
answer:--# importing pandas package
import pandas as pd

# create a Pandas DataFrame
df = pd.DataFrame({'Col1':[4.1, 23.43], 'Col2':['a', 'w'], 'Col3':[1, 8]})

print("DataFrame:")
print(df)

# apply the dtype attribute
result = df.dtypes

print("Output:")
print(result)

Q3. How do you select rows from a Pandas DataFrame based on a condition?
answer:-- # importing pandas
import pandas as pd

record = {
'Name': ['Ankit', 'Amit', 'Aishwarya', 'Priyanka', 'Priya', 'Shaurya' ],
'Age': [21, 19, 20, 18, 17, 21],
'Stream': ['Math', 'Commerce', 'Science', 'Math', 'Math', 'Science'],
'Percentage': [88, 92, 95, 70, 65, 78] }

# create a dataframe
dataframe = pd.DataFrame(record, columns = ['Name', 'Age', 'Stream', 'Percentage'])

print("Given Dataframe :\n", dataframe)

# selecting rows based on condition
rslt_df = dataframe[dataframe['Percentage'] > 80]

print('\nResult dataframe :\n', rslt_df)


Q4. How do you rename columns in a Pandas DataFrame?
answer:-- import pandas as pd
students = {
    "firstname": ["John", "Jane", "Jade"], 
    "lastname": ["Doe", "Done", "Do"]
}
# convert student names into a Dataframe
df = pd.DataFrame(students)
df.rename(columns={"firstname": "FIRSTNAME", "lastname": "LASTNAME"}, inplace=True)
print(df)


Q5. How do you drop columns in a Pandas DataFrame?
answer:--# Import pandas package
import pandas as pd

# create a dictionary with five fields each
data = {
	'A': ['A1', 'A2', 'A3', 'A4', 'A5'],
	'B': ['B1', 'B2', 'B3', 'B4', 'B5'],
	'C': ['C1', 'C2', 'C3', 'C4', 'C5'],
	'D': ['D1', 'D2', 'D3', 'D4', 'D5'],
	'E': ['E1', 'E2', 'E3', 'E4', 'E5']}

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

# Remove column name 'A'
df.drop(['A'], axis=1)

Q6. How do you find the unique values in a column of a Pandas DataFrame?
answer:--
# Import pandas package
import pandas as pd

# create a dictionary with five fields each
data = {
	'A':['A1', 'A2', 'A3', 'A4', 'A5'],
	'B':['B1', 'B2', 'B3', 'B4', 'B4'],
	'C':['C1', 'C2', 'C3', 'C3', 'C3'],
	'D':['D1', 'D2', 'D2', 'D2', 'D2'],
	'E':['E1', 'E1', 'E1', 'E1', 'E1'] }

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

# Get the unique values of 'E' column
df.E.unique()

Q7. How do you find the number of missing values in each column of a Pandas DataFrame?
answer:--
# importing pandas as pd
import pandas as pd

# importing numpy as np
import numpy as np

# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
		'Second Score': [30, 45, 56, np.nan],
		'Third Score':[np.nan, 40, 80, 98]}

# creating a dataframe from list
df = pd.DataFrame(dict)

# using isnull() function
df.isnull()


Q8. How do you fill missing values in a Pandas DataFrame with a specific value?
answer:-- newdf = df.fillna(222222)

Q9. How do you concatenate two Pandas DataFrames?
answer:--import pandas as pd
import numpy as np
 
df1 = pd.DataFrame(np.random.randint(25, size=(4, 4)),
                   index=["1", "2", "3", "4"],
                   columns=["A", "B", "C", "D"])
 
df2 = pd.DataFrame(np.random.randint(25, size=(6, 4)),
                   index=["5", "6", "7", "8", "9", "10"],
                   columns=["A", "B", "C", "D"])
# concatenating df1 and df2 along rows
vertical_concat = pd.concat([df1, df2], axis=0)
 display(vertical_concat)
 
 Q10. How do you merge two Pandas DataFrames on a specific column?
 answer:--
 # importing modules
import pandas as pd

# creating a dataframe
df1 = pd.DataFrame({'Name':['Raju', 'Rani', 'Geeta', 'Sita', 'Sohit'],
					'Marks':[80, 90, 75, 88, 59]})

# creating another dataframe with different data
df2 = pd.DataFrame({'Name':['Raju', 'Divya', 'Geeta', 'Sita'],
					'Grade':['A', 'A', 'B', 'A'],
					'Rank':[3, 1, 4, 2 ],
					'Gender':['Male', 'Female', 'Female', 'Female']})
# display df1
display(df1)
# display df2
display(df2)

# applying merge
df1.merge(df2[['Name', 'Grade', 'Rank']])

Q11. How do you group data in a Pandas DataFrame by a specific column and apply an aggregation function?
answer:-- 
grouped_single = df.groupby('Team').agg({'Age': ['mean', 'min', 'max']})
print(grouped_single)

Q12. How do you pivot a Pandas DataFrame?		   
answer:---
The pivot() function is used to reshaped a given DataFrame organized by given index / column values

Q13. How do you change the data type of a column in a Pandas DataFrame?
answer:--
# importing pandas as pd
import pandas as pd

# sample dataframe
df = pd.DataFrame({
	'A': [1, 2, 3, 4, 5],
	'B': ['a', 'b', 'c', 'd', 'e'],
	'C': [1.1, '1.0', '1.3', 2, 5]})

# converting all columns to string type
df = df.astype(str)
print(df.dtypes)

# using dictionary to convert specific columns
convert_dict = {'A': int,
                'C': float}
                
df = df.astype(convert_dict)
print(df.dtypes)

Q14. How do you sort a Pandas DataFrame by a specific column?
answer:--# import pandas library as pd
import pandas as pd

# List of Tuples
students = [('Ankit', 22, 'Up', 'Geu'),
		('Ankita', 31, 'Delhi', 'Gehu'),
		('Rahul', 16, 'Tokyo', 'Abes'),
		('Simran', 41, 'Delhi', 'Gehu'),
		('Shaurya', 33, 'Delhi', 'Geu'),
		('Harshita', 35, 'Mumbai', 'Bhu' ),
		('Swapnil', 35, 'Mp', 'Geu'),
		('Priya', 35, 'Uk', 'Geu'),
		('Jeet', 35, 'Guj', 'Gehu'),
		('Ananya', 35, 'Up', 'Bhu')
			]

# Create a DataFrame object from
# list of tuples with columns
# and indices.
details = pd.DataFrame(students, columns =['Name', 'Age', 'Place', 'College'],
				index =[ 'b', 'c', 'a', 'e', 'f', 'g', 'i', 'j', 'k', 'd'])

# Sort the rows of dataframe by 'Name' column
result_df = details.sort_values(by = 'Name')

# show the resultant Dataframe
result_df

Q15. How do you create a copy of a Pandas DataFrame?
answer:-- import pandas as pd

data = {
  "name": ["Sally", "Mary", "John"],
  "qualified": [True, False, False]
}

df = pd.DataFrame(data)
print(df)

#Make a copy:

newdf = df.copy()

print(newdf)

Q16. How do you filter rows of a Pandas DataFrame by multiple conditions?
answer:--# import module
import pandas as pd

# assign data
dataFrame = pd.DataFrame({'Name': [' RACHEL ', ' MONICA ', ' PHOEBE ',' ROSS ', 'CHANDLER', ' JOEY '],			
			 'Age': [30, 35, 37, 33, 34, 30],
			  'Salary': [100000, 93000, 88000, 120000, 94000, 95000],
			  'JOB': ['DESIGNER', 'CHEF', 'MASUS', 'PALENTOLOGY','IT', 'ARTIST']})
# filter dataframe
display(dataFrame.loc[(dataFrame['Salary']>=100000) & (dataFrame['Age']< 40) & (dataFrame['JOB'].str.startswith('D')),
					['Name','JOB']])

Q17. How do you calculate the mean of a column in a Pandas DataFrame?
answer:-- # importing pandas as pd
import pandas as pd

# Creating the dataframe
df = pd.DataFrame({"A":[12, 4, 5, 44, 1],
				"B":[5, 2, 54, 3, 2],
				"C":[20, 16, 7, 3, 8],
				"D":[14, 3, 17, 2, 6]})

df.mean(axis = 0)

Q18. How do you calculate the standard deviation of a column in a Pandas DataFrame?
answer:--
import pandas as pd
import numpy as np
df = pd.DataFrame({'age': [18, 19, 20, 18, 20, 21, 18, 19, 20, 21],
                   'height': [192, 189, 157, 178, 189, 201, 210, 189, 198, np.nan],
                   'weight': [69, 72, 73, 87, 89, 100, 98, 89, 72, np.nan]})
df.std()

output:--
age        1.173788
height    15.081261
weight    11.935009


Q19. How do you calculate the correlation between two columns in a Pandas DataFrame?

# import pandas module
import pandas as pd

# create dataframe with 3 columns
data = pd.DataFrame({
	"column1": [12, 23, 45, 67],
	"column2": [67, 54, 32, 1],
	"column3": [34, 23, 56, 23]
})
# correlation between column 1 and column2
print(data['column1'].corr(data['column2']))
 
# correlation between column 2 and column3
print(data['column2'].corr(data['column3']))
 
# correlation between column 1 and column3
print(data['column1'].corr(data['column3']))

Q20. How do you select specific columns in a DataFrame using their labels?
answer:--
import pandas as pd

#create DataFrame
df = pd.DataFrame({'mavs': [10, 12, 14, 15, 19, 22, 27],
                   'cavs': [18, 22, 19, 14, 14, 11, 20],
                   'hornets': [5, 7, 7, 9, 12, 9, 14],
                   'spurs': [10, 12, 14, 13, 13, 19, 22],
                   'nets': [10, 14, 25, 22, 25, 17, 12]})
#select column with name 'spurs'
df.loc[:, 'spurs']

Q21. How do you select specific rows in a DataFrame using their indexes?
answer:-- 
# import pandas
import pandas as pd

# List of Tuples
employees = [('Stuti', 28, 'Varanasi', 20000),
			('Saumya', 32, 'Delhi', 25000),
			('Aaditya', 25, 'Mumbai', 40000),
			('Saumya', 32, 'Delhi', 35000),
			('Saumya', 32, 'Delhi', 30000),
			('Saumya', 32, 'Mumbai', 20000),
			('Aaditya', 40, 'Dehradun', 24000),
			('Seema', 32, 'Delhi', 70000)
			]

# Create a DataFrame object from list
df = pd.DataFrame(employees,
				columns =['Name', 'Age',
				'City', 'Salary'])

result = df["City"]
 
# Show the dataframe
result

Q22. How do you sort a DataFrame by a specific column? 
answer:--# import pandas library as pd
import pandas as pd

# List of Tuples
students = [('Ankit', 22, 'Up', 'Geu'),
		('Ankita', 31, 'Delhi', 'Gehu'),
		('Rahul', 16, 'Tokyo', 'Abes'),
		('Simran', 41, 'Delhi', 'Gehu'),
		('Shaurya', 33, 'Delhi', 'Geu'),
		('Harshita', 35, 'Mumbai', 'Bhu' ),
		('Swapnil', 35, 'Mp', 'Geu'),
		('Priya', 35, 'Uk', 'Geu'),
		('Jeet', 35, 'Guj', 'Gehu'),
		('Ananya', 35, 'Up', 'Bhu')
			]

# Create a DataFrame object from
# list of tuples with columns
# and indices.
details = pd.DataFrame(students, columns =['Name', 'Age', 'Place', 'College'],
				index =[ 'b', 'c', 'a', 'e', 'f', 'g', 'i', 'j', 'k', 'd'])

# Sort the rows of dataframe by 'Name' column
result_df = details.sort_values(by = 'Name')
result_df

Q24. How do you remove duplicates from a DataFrame?
answer:--
import pandas as pd

data = {
  "name": ["Sally", "Mary", "John", "Mary"],
  "age": [50, 40, 30, 40],
  "qualified": [True, False, False, False]
}

df = pd.DataFrame(data)
newdf = df.drop_duplicates()
print(newdf)

Q25. What is the difference between .loc and .iloc in Pandas?
answer:--Loc and iloc are two functions in Pandas that are used to slice a data set in a Pandas DataFrame. 
The function . loc is typically used for label indexing and can access multiple columns,
while . iloc is used for integer indexing.
